#summary Some design thoughts about the window manager system

= Window wrapping =
 # wrappen gebeurt door de WindowManager die een method heeft met als argument interface 2 => addWindow( ... ) => welke methods hebben we daar nodig?
 # Definieren van een ActionMap door het mergen van die van de AppInternalFrame (voor de TOGGLE_VISIBILITY) met die van <interface 2> 
 # In het geval van een dispose() (unwrapping) => component onzichtbaar maken => hoe nieuwe actie terugkoppelen?

= Visibility toggling =
ENKEL de verantwoordelijkheid van self contained windows, concreet door ofwel implementeren van een ComponentListener of een andere manier van events opvangen

 # AppInternalFrame
 # DSJComponent (in het geval die fullscreen is)
 # UEyeCapturer (hoe de events hier vastkrijgen?)

= Fullscreen toggling =
verantwoordelijkheid van de implementatie zelf

 # self contained: gewoon setFullScreen aanroepen en verder niks meer van aantrekken!
 # niet self contained: niet implementeren
 # self EN niet self contained (bvb DSjComponent):

 * moet gewrapped worden als van self contained naar niet self contained (eerst call naar setFullscreen, dan via bestaande logica window wrappen en tonen) 

 * moet unwrapped worden als van niet self contained naar self container (gewoon component vrijzetten, kijk oude showComponent() code hiervoor, dan call naar setFullscreen)

 * wrapping/unwrapping op het niveau van WindowManager

= Interface Description =
 # AppWindowWrapper 
isVisible()
setVisible()
toggleVisibility()
toFront()
getTitle() - zodat de menu en mediacontrols de juiste titel kunnen weergeven
 # TBD