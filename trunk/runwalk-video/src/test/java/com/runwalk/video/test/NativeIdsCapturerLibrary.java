package com.runwalk.video.test;
import java.nio.ByteBuffer;

import com.ochafik.lang.jnaerator.runtime.CharByReference;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.win32.StdCallLibrary;
/**
 * JNA Wrapper for library <b>NativeIdsCapturer</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NativeIdsCapturerLibrary implements StdCallLibrary {
	public static final java.lang.String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("uEye_api", true, NativeIdsCapturerLibrary.class);
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(NativeIdsCapturerLibrary.JNA_LIBRARY_NAME);
	
	public static final int INIT_SUCCESS = 0;
	public static final int IS_INVALID_HANDLE = 1;
	
	
	static {
		Native.register(NativeIdsCapturerLibrary.JNA_LIBRARY_NAME);
	}

	/**
	 * Original signature : <code>int* GetCameraNames()</code><br>
	 * <i>native declaration : line 14</i>
	 */
	//public static native UEYE_CAMERA_LIST.ByReference GetCameraNames();
	/**
	 * <i>native declaration : line 15</i><br>
	 * Conversion Error : LPMSG
	 */
	/**
	 * Original signature : <code>__stdcall void ProcessDllIdle()</code><br>
	 * <i>native declaration : line 16</i>
	 */
	//public static native void ProcessDllIdle();
	
	
	public static native int is_InitCamera(IntByReference phf, Pointer window);
	
	public static native int is_LoadParameters(IntByReference phf, String fileName);

	public static native int is_AllocImageMem(int cameraHandle, int width, int height, int bitspixel, PointerByReference imageMemory, IntByReference memoryId);
	
	public static native int is_SetImageMem (int cameraHandle, Pointer imageMemory, int id);	// set memory active
	
	public static native int is_GetActiveImageMem (int cameraHandle, PointerByReference buffer, IntByReference memoryId);
}
