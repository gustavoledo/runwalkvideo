/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewClientTablePanel.java
 *
 * Created on 20-nov-2009, 17:54:56
 */

package com.runwalk.video.gui;

import com.runwalk.video.entities.Articles;
import com.runwalk.video.entities.Client;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.BorderFactory;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DateFormatter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.JFormattedTextField;
import com.runwalk.video.entities.City;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.Beans;
import java.util.Collections;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.persistence.Persistence;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListCellRenderer;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.InputVerifier;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.ObjectProperty;
import org.jdesktop.beansbinding.Validator;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.JTableBinding.ColumnBinding;
import org.jdesktop.swingbinding.SwingBindings;

/**
 *
 * @author Administrator
 */
public class NewClientTablePanel extends AbstractTablePanel {

    public static void main(String[] args) {
        new NewClientTablePanel();
    }

    /** Creates new form NewClientTablePanel */
    public NewClientTablePanel() {
        super(null);
//        super(RunwalkVideoApp.getApplication().getClientTableModel());
        initComponents();
        JFrame frame = new JFrame();
        frame.add(this);
        frame.pack();
        frame.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents
        bindingGroup = new BindingGroup();

        entityManager = Beans.isDesignTime() ? null : Persistence.createEntityManagerFactory("VideoRunwalk").createEntityManager();
        clientQuery = Beans.isDesignTime() ? null  : entityManager.createNamedQuery("findAllClients");
        clientList = Beans.isDesignTime() ? Collections.emptyList() : clientQuery.getResultList();
        mainPanel = new JPanel();
        cityQuery = Beans.isDesignTime() ? null : entityManager.createQuery("SELECT c FROM City c");
        cityList = Beans.isDesignTime() ? Collections.emptyList() : cityQuery.getResultList();
        genderRadioButtonGroup = new ButtonGroup();
        detailTabbedPane = new JTabbedPane();
        analysisInfoPanel = new JPanel();
        analysisTableScrollPane = new JScrollPane();
        analysisTable = new JTable();
        clientInfoPanel = new JPanel();
        nameLabel = new JLabel();
        firstnameField = new JTextField();
        nameField = new JTextField();
        organisationLabel = new JLabel();
        organisationField = new JTextField();
        addressField = new JTextField();
        addressLabel = new JLabel();
        taxLabel = new JLabel();
        taxField = new JTextField();
        emailLabel = new JLabel();
        emailField = new JTextField();
        zipcodeLabel = new JLabel();
        zipcodeField = new JComboBox();
        locationLabel = new JLabel();
        locationField = new JComboBox();
        phoneLabel = new JLabel();
        phoneField = new JTextField();
        firstnameLabel = new JLabel();
        maleRadioButton = new JRadioButton();
        femaleRadioButton = new JRadioButton();
        birthdateLabel = new JLabel();
        birthdateField = new JFormattedTextField();
        genderLabel = new JLabel();
        jPanel1 = new JPanel();
        clientTableScrollPane = new JScrollPane();
        clientTable = getTable();

        mainPanel.setName("mainPanel"); // NOI18N

        GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        detailTabbedPane.setName("detailTabbedPane\n"); // NOI18N

        analysisInfoPanel.setName("analysisInfoPanel"); // NOI18N

        analysisTableScrollPane.setName("analysisTableScrollPane"); // NOI18N

        analysisTable.setColumnSelectionAllowed(true);
        analysisTable.setName("analysisTable"); // NOI18N

        ELProperty eLProperty = ELProperty.create("${selectedElement.analyses}");
        JTableBinding jTableBinding = SwingBindings.createJTableBinding(UpdateStrategy.READ_WRITE, clientTable, eLProperty, analysisTable);
        ColumnBinding columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${timeStamp}"));
        columnBinding.setColumnName("Time Stamp");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${article}"));
        columnBinding.setColumnName("Article");
        columnBinding.setColumnClass(Articles.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${recording.keyframeCount}"));
        columnBinding.setColumnName("Recording.keyframe Count");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${recording.duration}"));
        columnBinding.setColumnName("Recording.duration");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${recording.recorded}"));
        columnBinding.setColumnName("Recording.recorded");
        columnBinding.setColumnClass(Boolean.class);
        jTableBinding.setSourceNullValue(Collections.emptyList());
        jTableBinding.setSourceUnreadableValue(Collections.emptyList());
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        analysisTableScrollPane.setViewportView(analysisTable);
        ResourceBundle bundle = ResourceBundle.getBundle("com/runwalk/video/gui/resources/AbstractTableModel");
        analysisTable.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        analysisTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("analysisTableModel.columnModel.col1")); // NOI18N
        analysisTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("analysisTableModel.columnModel.col2")); // NOI18N
        analysisTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("analysisTableModel.columnModel.col3")); // NOI18N
        analysisTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("analysisTableModel.columnModel.col4")); // NOI18N
        analysisTable.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("analysisTableModel.columnModel.col5")); // NOI18N

        GroupLayout analysisInfoPanelLayout = new GroupLayout(analysisInfoPanel);
        analysisInfoPanel.setLayout(analysisInfoPanelLayout);
        analysisInfoPanelLayout.setHorizontalGroup(
            analysisInfoPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(analysisInfoPanelLayout.createSequentialGroup()
                .addComponent(analysisTableScrollPane, GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addContainerGap())
        );
        analysisInfoPanelLayout.setVerticalGroup(
            analysisInfoPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(analysisInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(analysisTableScrollPane, GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );

        ResourceBundle bundle1 = ResourceBundle.getBundle("com/runwalk/video/resources/RunwalkVideoApp"); // NOI18N
        detailTabbedPane.addTab(bundle1.getString("analysisInfoPanel.title"), analysisInfoPanel); // NOI18N

        clientInfoPanel.setName("clientInfoPanel"); // NOI18N

        ResourceBundle bundle2 = ResourceBundle.getBundle("com/runwalk/video/gui/resources/ClientInfoPanel"); // NOI18N
        nameLabel.setText(bundle2.getString("nameLabel.text")); // NOI18N
        nameLabel.setName("nameLabel"); // NOI18N

        firstnameField.setName("firstnameField"); // NOI18N

        Binding binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.name}"), firstnameField, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        nameField.setName("nameField"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.firstname}"), nameField, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        organisationLabel.setText(bundle2.getString("organisationLabel.text")); // NOI18N
        organisationLabel.setName("organisationLabel"); // NOI18N

        organisationField.setName("organisationField"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.organization}"), organisationField, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        addressField.setName("addressField"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.address}"), addressField, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        addressLabel.setText(bundle2.getString("addressLabel.text")); // NOI18N
        addressLabel.setName("adressLabel\n"); // NOI18N

        taxLabel.setText(bundle2.getString("taxNoLabel.text")); // NOI18N
        taxLabel.setName("btwLabel"); // NOI18N

        taxField.setName("taxField"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.btwnr}"), taxField, BeanProperty.create("text"), "emailBinding");
        binding.setValidator(new Validator () {

            public Validator.Result validate(Object arg) {
                String regexPattern = "[0-9]{9}";
                Pattern pattern = Pattern.compile(regexPattern);
                Matcher matcher = pattern.matcher(arg.toString());
                if(!matcher.matches()){
                    return new Result(null, "Btwnr. moet 9 cijfers bevatten");
                }
                return null;    
            }
        });
        bindingGroup.addBinding(binding);

        emailLabel.setText(bundle2.getString("emailLabel.text")); // NOI18N
        emailLabel.setName("emailLabel"); // NOI18N

        emailField.setName("emailField"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.emailAddress}"), emailField, BeanProperty.create("text"));
        binding.setValidator(

            new Validator() {

                public Validator.Result validate(Object arg) {        
                String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
                Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
                Matcher matcher = pattern.matcher(arg.toString());
                    if(!matcher.matches()){
                        return new Result(null, "Email adres is niet correct geformatteerd");
                    }
                    return null;
                }
            }
        );
        bindingGroup.addBinding(binding);

        zipcodeLabel.setText(bundle2.getString("zipcodeLabel.text")); // NOI18N
        zipcodeLabel.setName("zipcodeLabel"); // NOI18N

        zipcodeField.setName("zipcodeField"); // NOI18N
        zipcodeField.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof City) {
                    City c = (City) value;
                    setText(""+c.getCode());
                }
                return this;
            }
        });

        JComboBoxBinding jComboBoxBinding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, cityList, zipcodeField);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.city}"), zipcodeField, BeanProperty.create("selectedItem"), "zipcodeBinding");
        binding.setSourceNullValue(null);
        bindingGroup.addBinding(binding);

        zipcodeField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                zipcodeFieldActionPerformed(evt);
            }
        });

        locationLabel.setText(bundle2.getString("locationLabel.text")); // NOI18N
        locationLabel.setName("locationLabel"); // NOI18N

        locationField.setName("locationField"); // NOI18N
        locationField.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof City) {
                    City c = (City) value;
                    setText(c.getName());
                }
                return this;
            }
        });

        jComboBoxBinding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, cityList, locationField);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.city}"), locationField, BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        phoneLabel.setText(bundle2.getString("telephoneLabel.text")); // NOI18N
        phoneLabel.setName("phoneLabel"); // NOI18N

        phoneField.setName("phoneField"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.phone}"), phoneField, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        firstnameLabel.setText(bundle2.getString("firstnameLabel.text")); // NOI18N
        firstnameLabel.setName("firstnameLabel"); // NOI18N

        maleRadioButton.setText(bundle2.getString("maleRadioButton.text")); // NOI18N
        maleRadioButton.setName("maleRadioButton"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.male}"), maleRadioButton, BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        femaleRadioButton.setText(bundle2.getString("femaleRadioButton.text")); // NOI18N
        femaleRadioButton.setName("femaleRadioButton"); // NOI18N

        birthdateLabel.setText(bundle2.getString("birthdateLabel.text")); // NOI18N
        birthdateLabel.setName("birthdateLabel"); // NOI18N

        birthdateField.setFormatterFactory(new DefaultFormatterFactory(new DateFormatter(new SimpleDateFormat("dd/MM/yyyy"))));
        birthdateField.setInputVerifier(new InputVerifier() {
            @Override
            public boolean shouldYieldFocus(JComponent input) {
                boolean inputOK = verify(input);
                if (inputOK) {
                    return true;
                }
                String failedVerificationMessage = "Date must be in the MMM DD, YYYY format. For example: Apr 17, 2008";
                JOptionPane.showMessageDialog(null, failedVerificationMessage, "Invalid Date Format", JOptionPane.WARNING_MESSAGE);
                //Reinstall the input verifier.
                input.setInputVerifier(this);
                return false;
            }
            public boolean verify(JComponent input) {
                boolean result = ((JFormattedTextField) input).isEditValid();
                if (!(input instanceof JFormattedTextField)) {
                    result = true; 
                }
                return result;
            }

        });
        birthdateField.setName("birthdateField"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, clientTable, ELProperty.create("${selectedElement.birthdate}"), birthdateField, BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        genderLabel.setText(bundle2.getString("genderLabel.text")); // NOI18N
        genderLabel.setName("genderLabel"); // NOI18N

        GroupLayout clientInfoPanelLayout = new GroupLayout(clientInfoPanel);
        clientInfoPanel.setLayout(clientInfoPanelLayout);
        clientInfoPanelLayout.setHorizontalGroup(
            clientInfoPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(clientInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(genderLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameLabel, GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(addressLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(emailLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(organisationLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zipcodeLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34)
                .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(addressField, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addGroup(clientInfoPanelLayout.createSequentialGroup()
                        .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.LEADING)
                            .addGroup(clientInfoPanelLayout.createSequentialGroup()
                                .addComponent(maleRadioButton)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(femaleRadioButton))
                            .addComponent(organisationField, GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(emailField, GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(firstnameField, GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.LEADING, false)
                            .addComponent(firstnameLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(birthdateLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(taxLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(phoneLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.TRAILING)
                            .addComponent(phoneField, GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(taxField, GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(birthdateField, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(nameField, GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))
                    .addGroup(clientInfoPanelLayout.createSequentialGroup()
                        .addComponent(zipcodeField, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(locationLabel, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(locationField, GroupLayout.PREFERRED_SIZE, 171, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        clientInfoPanelLayout.setVerticalGroup(
            clientInfoPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(clientInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(firstnameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel)
                    .addComponent(firstnameLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(maleRadioButton)
                    .addComponent(femaleRadioButton)
                    .addComponent(birthdateField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderLabel)
                    .addComponent(birthdateLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(organisationField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(taxField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(organisationLabel)
                    .addComponent(taxLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(emailField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneField, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel)
                    .addComponent(phoneLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(addressField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(clientInfoPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(zipcodeField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationLabel)
                    .addComponent(locationField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(zipcodeLabel))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        genderRadioButtonGroup.add(maleRadioButton);
        genderRadioButtonGroup.add(femaleRadioButton);

        detailTabbedPane.addTab(bundle1.getString("clientInfoPanel.title"), clientInfoPanel); // NOI18N

        ResourceBundle bundle3 = ResourceBundle.getBundle("com/runwalk/video/gui/resources/ClientTablePanel");
        jPanel1.setBorder(BorderFactory.createTitledBorder(bundle3.getString("borderPanel.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        clientTableScrollPane.setName("clientTableScrollPane"); // NOI18N

        clientTable.setColumnSelectionAllowed(true);
        clientTable.setName("clientTable"); // NOI18N

        jTableBinding = SwingBindings.createJTableBinding(UpdateStrategy.READ_WRITE, clientList, clientTable);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${firstname}"));
        columnBinding.setColumnName("Firstname");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${name}"));
        columnBinding.setColumnName("Name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${formattedLastAnalysisDate}"));
        columnBinding.setColumnName("Formatted Last Analysis Date");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        clientTableScrollPane.setViewportView(clientTable);
        clientTable.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        clientTable.getColumnModel().getColumn(0).setMinWidth(20);
        clientTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        clientTable.getColumnModel().getColumn(0).setMaxWidth(25);
        clientTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("clientTableModel.columnModel.col1")); // NOI18N
        clientTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("clientTableModel.columnModel.col2")); // NOI18N
        clientTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("clientTableModel.columnModel.col3")); // NOI18N
        clientTable.getColumnModel().getColumn(3).setPreferredWidth(60);
        clientTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("clientTableModel.columnModel.col4")); // NOI18N

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addComponent(clientTableScrollPane, GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addComponent(clientTableScrollPane, GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jPanel1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detailTabbedPane, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(detailTabbedPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        detailTabbedPane.getAccessibleContext().setAccessibleName(bundle1.getString("clientTabbedPane.title")); // NOI18N

        bindingGroup.bind();
    }//GEN-END:initComponents

    private void zipcodeFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_zipcodeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zipcodeFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField addressField;
    private JLabel addressLabel;
    private JPanel analysisInfoPanel;
    private JTable analysisTable;
    private JScrollPane analysisTableScrollPane;
    private JFormattedTextField birthdateField;
    private JLabel birthdateLabel;
    private List<City> cityList;
    private Query cityQuery;
    private JPanel clientInfoPanel;
    private List<Client> clientList;
    private Query clientQuery;
    private JTable clientTable;
    private JScrollPane clientTableScrollPane;
    private JTabbedPane detailTabbedPane;
    private JTextField emailField;
    private JLabel emailLabel;
    private EntityManager entityManager;
    private JRadioButton femaleRadioButton;
    private JTextField firstnameField;
    private JLabel firstnameLabel;
    private JLabel genderLabel;
    private ButtonGroup genderRadioButtonGroup;
    private JPanel jPanel1;
    private JComboBox locationField;
    private JLabel locationLabel;
    private JPanel mainPanel;
    private JRadioButton maleRadioButton;
    private JTextField nameField;
    private JLabel nameLabel;
    private JTextField organisationField;
    private JLabel organisationLabel;
    private JTextField phoneField;
    private JLabel phoneLabel;
    private JTextField taxField;
    private JLabel taxLabel;
    private JComboBox zipcodeField;
    private JLabel zipcodeLabel;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
